datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    role          Role      @default(default)
    player        Player?
    chips         Int       @default(1000)
    friends       User[]    @relation("Friends")
    friendedBy    User[]    @relation("Friends")
    lobby         Lobby?    @relation(fields: [lobbyId], references: [id])
    lobbyId       String?
    timeout       DateTime?
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String  @unique
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Lobby {
    id         String    @id @default(uuid())
    name       String?
    access     Access
    ownerId    String?
    size       Int
    users      User[]
    channel    String    @unique
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    startAt    DateTime?
    started    Boolean   @default(false)
    blindIndex Int
    game       Game?
    gameId     String?
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Player {
    id          String  @id
    card1       String
    card2       String
    folded      Boolean
    chip_amount Int
    bet         Int
    channel     String  @unique
    game        Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
    gameId      String
    user        User    @relation(fields: [id], references: [id])
}

model Game {
    id                 String    @id @default(uuid())
    centerCards        String[]
    centerRevealAmount Int
    players            Player[]
    currentPlayerIndex Int
    betIncreaseIndex   Int
    pot                Int
    lobby              Lobby     @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
    lobbyId            String    @unique
    restartAt          DateTime?
}

enum Role {
    default
    admin
}

enum Access {
    public
    private
}
